1) Introducing C# & .NET
.NET has Two Types
1) Windows Framework
2) .NET Core (Works on Linux,Mac & Windows)

.NET is Common Language Runtime / FCL (Framework Class Library) containes Library written & tested by developers since its open source.

To Start New Project in C#

cd to the folder 

Commands to be written in cmd/ console
dotnet
dotnet --info
dotnet --help sdk commands 
dotnet new
mkdir gradebook
mkdir src ->  mkdir GradeBook
mkdir test
dotnet new console Makes A new console Application csproj file is C#.
dotnet run

from gradebook 
dotnet run --project src\GradeBook
dotnet restore

Nuget Packages written by other developers can be used by us. Whenever we require a feature that is written in nuget packages. Package Feed
Nuget is nothing but npm of node js 

dotnet build -> converts into binary format which is .dll extensions is output of dotnet build

Can delete bin and obj file as long as u have src code

E:\Capgemini\Azure Training\C# Fundamentals\gradebook\src\GradeBook> dotnet .\bin\Debug\net5.0\GradeBook.dll

dotnet run Rehan Parameter for CLI
\dotnet run -- Rehan Parameter for Application 

Debugging in C#
F5 Click on color circle on the line you need to Debug

2) Learning the C# Syntax

Learn about Variable Declaration , Looping of For statement 
Array declaration methods as well as List declaration.
Dynamic arrays known As List declaration 
Refrences to the class Object using Ctrl + Period
Various String Formatting Methods such As N1.

3) Working with Classes And Objects

Class - Blueprint to initialize new Objects
Object - Objects created using new keywords Constructor are used for object creation and is used to gain control

C# initializes implicit constructor if not wriiten by us

Classes are written for some protection and encapsulation is hiding complexities and details that are not important.

Access modifiers are public, protected

this is implicitely variable available inside of methdo & constructor used to refer to the objects it has been refering now.

AddGrade is instance member of Class 

Learned how to instantiate object,class with public instance members, Constructor And some private fields.

4) Testing your Code 
Unit tests - To verify the program is running properly or not. Checks for worst case scenarios. Done using Test Runner. Automating the testing process.
XUnit.net Library for Testing


5)Working with Reference Types and Value Types
Reference types
var b = new Book("Grades");

b=1072
1072 is the address that points to the Book Object

Value Types x=3
3 is saved in variable X

dotnet new sln
dotnet sln add .\src\GradeBook\GradeBook.csproj
dotnet build -> builds our project as well as test the unit tests and shows the result

please be caution to add [Fact] before each of the test inorder for the dotnet test command to recognise that the function is a test function
Day to Day programming Doesnt uses pass by refernce that often but still sometimes bussiness require to use pass by reference

Ref & out is similar but in out it assumes it is not initialize so it must be assigned before exiting but in ref u dont need to assign


Rules :

Value Types 
public struct Point{}

Reference types
Defined by Class 
public class Person {}


C# passes Name by Value in most of the Cases


Garbage Collector keeps a track of all the variable created and refernce using pointers. It deallocates to clean up memory so that it doesnt get exhausted

6)Controlling the Flow of Execution

Learned About Looping Statement Such as if, foreach , do-while executes atleast onece , break & continue statement, go to (not recommend in bussiness apllication), Advance Switch Statement & Pattern matching,Taking User Input, Handling Exceptions.